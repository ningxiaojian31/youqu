<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.zdxh.chat.mapper.TbChatRecordMapper" >
  <resultMap id="BaseResultMap" type="cn.zdxh.chat.pojo.TbChatRecord" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="userid" property="userid" jdbcType="VARCHAR" />
    <result column="friendid" property="friendid" jdbcType="VARCHAR" />
    <result column="has_read" property="hasRead" jdbcType="INTEGER" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="has_delete" property="hasDelete" jdbcType="INTEGER" />
    <result column="message" property="message" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="ListResultMap" type="cn.zdxh.chat.pojo.TbChatRecordVO" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="userid" property="userid" jdbcType="VARCHAR" />
    <result column="friendid" property="friendid" jdbcType="VARCHAR" />
    <result column="has_read" property="hasRead" jdbcType="INTEGER" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="has_delete" property="hasDelete" jdbcType="INTEGER" />
    <result column="message" property="message" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="image" property="image" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, userid, friendid, has_read, createtime, has_delete, message
  </sql>

  <sql id="List_Column_List" >
    temp.id, temp.userid, temp.friendid, temp.has_read, temp.createtime, temp.has_delete, temp.message, u.nickname, u.image
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tb_chat_record
    where id = #{id,jdbcType=VARCHAR}
  </select>

  <insert id="insert" parameterType="cn.zdxh.chat.pojo.TbChatRecord" >
    insert into tb_chat_record (id, userid, friendid, 
      has_read, createtime, has_delete, 
      message)
    values (#{id,jdbcType=VARCHAR}, #{userid,jdbcType=VARCHAR}, #{friendid,jdbcType=VARCHAR}, 
      #{hasRead,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, #{hasDelete,jdbcType=INTEGER},
      #{message,jdbcType=VARCHAR})
  </insert>


  <update id="updateByPrimaryKey" parameterType="cn.zdxh.chat.pojo.TbChatRecord" >
    update tb_chat_record
    set userid = #{userid,jdbcType=VARCHAR},
      friendid = #{friendid,jdbcType=VARCHAR},
      has_read = #{hasRead,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      has_delete = #{hasDelete,jdbcType=INTEGER},
      message = #{message,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>

    <select id="findListByUserId" parameterType="cn.zdxh.chat.pojo.TbChatRecord" resultMap="ListResultMap">
      (SELECT  temp.id, temp.userid, temp.friendid, temp.has_read, temp.createtime, temp.has_delete, temp.message, u.nickname, u.image
        FROM (SELECT t.friendid,any_value(t.id)AS id,any_value(t.userid) AS userid,any_value(t.has_delete) AS has_delete,
        any_value(t.has_read) AS has_read,any_value(t.createtime) AS createtime,any_value(t.message) AS message
       FROM
      (SELECT * FROM tb_chat_record tc
       <where>
         tc.has_delete = 0
         <if test="userid != null and userid != ''" >
           AND tc.userid = #{userid}
         </if>
       </where>
      ORDER BY tc.createtime DESC LIMIT 0, 1000000) AS t
      GROUP BY t.friendid)AS temp
      LEFT JOIN t_user u
      ON temp.friendid = u.id)
      UNION ALL
      (SELECT  temp2.id, temp2.userid, temp2.friendid, temp2.has_read, temp2.createtime, temp2.has_delete, temp2.message, u2.nickname, u2.image
       FROM (SELECT any_value(t2.friendid)AS friendid,any_value(t2.id)AS id,t2.userid,any_value(t2.has_delete) AS has_delete,
        any_value(t2.has_read) AS has_read,any_value(t2.createtime) AS createtime,any_value(t2.message) AS message
      FROM
      (SELECT * FROM tb_chat_record tc2
      <where>
        tc2.has_delete = 0
        <if test="userid != null and userid != ''" >
          AND tc2.friendid = #{userid}
        </if>
      </where>
      ORDER BY tc2.createtime DESC LIMIT 0, 1000000) AS t2
      GROUP BY t2.userid)AS temp2
      LEFT JOIN t_user u2
      ON temp2.userid = u2.id)

    </select>

  <select id="findUnreadByUserId" parameterType="cn.zdxh.chat.pojo.TbChatRecord" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM tb_chat_record
    <where>
      <if test="userid != null and userid != ''" >
        AND friendid = #{userid,jdbcType=VARCHAR}
      </if>
      <if test="hasRead != null" >
        AND  has_read = #{hasRead,jdbcType=INTEGER}
      </if>
    </where>
  </select>

  <select id="findAllByUserIdAndFriendId" parameterType="cn.zdxh.chat.pojo.TbChatRecord" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM tb_chat_record
    WHERE (userid = #{userid} AND friendid = #{friendid}) OR
    (userid = #{friendid} AND friendid = #{userid}) AND has_delete = 0
  </select>
</mapper>
